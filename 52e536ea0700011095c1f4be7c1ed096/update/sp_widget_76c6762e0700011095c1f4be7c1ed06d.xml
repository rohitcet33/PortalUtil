<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($scope,$rootScope,spUtil,spModal, $window,$http) {
  /* widget controller */
  var c = this;
	$rootScope.$on('pagination-data', function(event,data) {
		c.data.dataOptins=data;
   });
	
	$scope.$on('widget-filter-breadcrumbs.queryModified', function(e, newFilter){
		$scope.data.filter = newFilter;
		spUtil.update($scope).then(function(){
			$rootScope.$broadcast('send-pagination-data', c.data.dataOptins);
		});
	});
	
		$scope.headerClass =function (index){
		if(index>2)
			return "header1";
			else
			//return "header2"; 
			return "header1";
	}
	
//Sorting
$scope.reverse = false;
$scope.sortKey = 'number';
$scope.sort = function (keyname) {
$scope.sortKey = keyname;
$scope.reverse = !$scope.reverse;
//$scope.currentIndex=0;
$rootScope.$broadcast('send-pagination-data', c.data.dataOptins);
}
//End Shorting
	
	
	// Start Personalized
	$rootScope.$on('personalizationDone', function(event,data) {
		$window.location.reload(); // refresh to new layout
		});
 c.personalize = function(widgetId, widgetInput) {
        spModal.open({
            title: 'Personalize List Columns',
            widget: widgetId, 
            widgetInput: $scope.data.personalizeParms || {}
        }).then(function(){
					$rootScope.$emit('saveChosen');
       
        })      
    }
	 // End Personalized
	
	// Context menu generic Search 
	$scope.setSearch = function(updateUrl) {
		$scope.data.p = 1;
		if ($scope.data.keywords) {
			var previousSearchTerm = $scope.previousSearchTerm;
			if (previousSearchTerm) {
			previousSearchTerm = '123TEXTQUERY321=' + previousSearchTerm;
			var previousSearchTermStartIndex = $scope.data.filter.indexOf(previousSearchTerm);
			var previousSearchTermEndIndex = previousSearchTermStartIndex + previousSearchTerm.length;
			if (previousSearchTermStartIndex >= 0)
				$scope.data.filter = $scope.data.filter.substr(0, previousSearchTermStartIndex) + $scope.data.filter.substr(previousSearchTermEndIndex + 1, $scope.data.filter.length);
			}
			$scope.previousSearchTerm = $scope.data.keywords;
		}
		getData(updateUrl);
	}
	function getData(updateUrl) {
		var f = $scope.data;
		spUtil.update($scope).then(function(data) {
			f.view = data.view;
			if ($scope.options.fromUrl && updateUrl)
				setPermalink(f.table, f.filter, f.o, f.d, f.p);

			if ($scope.options.show_breadcrumbs && data.filterBreadcrumbs)
				$scope.$broadcast('widget-filter-breadcrumbs.setBreadcrumbs', data.filterBreadcrumbs.data, data.filter);
			$rootScope.$broadcast('send-pagination-data', c.data.dataOptins);
			//invokeResultsLiveMessage();  Rohit
			//initRecordWatcher(f.table, f.filter);  Rohit
		});
	}
	// Context menu generic search end
	
	// Context menu 
	function parseQuery(table, queryString){
		return $http.post('/api/now/sp/parsequery/' + table, queryString).then(function(response){
				return response.data.result;
		});
	}
	c.isMultiPart = function(terms) {
		for (var i = 0; i < terms.length; i++) {
			var term = terms[i];
			while (term.left)
				term = term.left;
			if (term.NQ)
				return true;
		}
		return false;
	}
	function isSameField(t1, t2) {
		if ('left' in t1 && 'left' in t2)
			return t1.left.query_term_field === t2.left.query_term_field;
		else if ('left' in t1)
			return t1.left.query_term_field === t2.query_term_field;
		else if ('left' in t2)
			return t1.query_term_field === t2.left.query_term_field;
		return t1.query_term_field === t2.query_term_field;
	}
	
	function getEncodedTerm(term) {
		var eq;
		if (term.left) {
			eq = getEncodedTerm(term.left);
			eq += '^OR';
			eq += getEncodedTerm(term.right);
		} else {
			eq = term.query_term_field;
			eq += term.operator;
			eq += term.value;
		}
		return eq;
	}
	
	c.createQueryTerm = function(table, field, sys_id, operator){
		return $http.get('/api/now/sp/getInOutQueryTerm', {
			params: {
				table: table,
				sys_id: sys_id,
				field: field,
				operator: operator
			}
		}).then(function(response){
			if (response && response.data && response.data.result)
				return response.data.result.parts;
		});
	}
	c.showMatching = function(field, newTerm) {
		var queryString = $scope.data.filter;
		var eq = "";
		parseQuery($scope.data.table, queryString).then(function(oldTerms) {
			var isMultiPart = c.isMultiPart(oldTerms);
			for (var i = 0; i < oldTerms.length; i++) {
				var term = oldTerms[i];
				if (!isMultiPart && isSameField(newTerm, term))
					continue;

				if (eq.length)
					eq += '^';

				// term may be separated into nested "left" and "right" bits,
				// follow the lefts to the bottom where "NQ" might be specified
				var termNQCheck = oldTerms[i];
				while (termNQCheck.left)
					termNQCheck = termNQCheck.left;
				if (termNQCheck.NQ) {
					// query is multipart so apply new term to each part
					eq += getEncodedTerm(newTerm);
					eq += "^NQ";
				}
				eq += getEncodedTerm(term);
			}
			if (eq.length)
				eq += '^';
			eq += getEncodedTerm(newTerm);

			$scope.data.filter = eq;
			$scope.setSearch();
		});
	};

	c.filterOut = function(field, newTerm) {
		var eq = "";
		if ($scope.data.filter.indexOf("^NQ") == -1) {
			// don't need server roundtrip to parse query,
			// can just append the new term
			eq = $scope.data.filter;
			if (eq.length)
				eq += '^';
			eq += getEncodedTerm(newTerm);
			$scope.data.filter = eq;
			$scope.setSearch();
			return;
		}
		
		// query may be multipart so must apply new term to each part
		var queryString = $scope.data.filter;
		parseQuery($scope.data.table, queryString).then(function(oldTerms) {
			for (var i = 0; i < oldTerms.length; i++) {
				var term = oldTerms[i];
				if (eq.length)
					eq += '^';

				// term may be separated into nested "left" and "right" bits,
				// follow the lefts to the bottom where "NQ" might be specified
				var termNQCheck = oldTerms[i];
				while (termNQCheck.left)
					termNQCheck = termNQCheck.left;
				if (termNQCheck.NQ) {
					// query is multipart so apply new term to end of each part
					eq += getEncodedTerm(newTerm);
					eq += "^NQ";
				}
				eq += getEncodedTerm(term);
			}
			if (eq.length)
				eq += '^';
			eq += getEncodedTerm(newTerm);

			$scope.data.filter = eq;
			$scope.setSearch();
		});
	};
	
	// Conetxt Menu end here 
	
	
	// List Action 
		$scope.selected ="";
	$scope.selectAction = function (){
		if($scope.selected != ''){
		var data=$scope.data.listAction;
		for(var i=0; i< data.length;i++){
			if(data[i].action_name == $scope.selected){
				var code=data[i].script;
				eval(code);
				$scope.selected ="";
			}
		}
		}
	}
	$scope.selectAllRec=false;
	$scope.selectAll = function(){
		var data= $scope.data.rec;
		$scope.selectAllRec = ! $scope.selectAllRec;
		for(var k=0; k<data.length; k++){
			data[k].check=$scope.selectAllRec;
		}
	}
	$scope.selectRec = function (val){
		if(val == false && $scope.selectAllRec == true){
			$scope.selectAllRec =false;
		}
	}
	// List Action End here
};]]></client_script>
        <controller_as>c</controller_as>
        <css>#customers {
  font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
  border-collapse: collapse;
  width: 100%;
  table-layout:fixed;
}

#customers td, #customers th {
  border: 3px solid #000000;
  padding: 8px;
}

#customers tr:nth-child(even){background-color: #f2f2f2;}

#customers tr:hover {background-color: #ddd;}

.header1 {
  padding-top: 12px;
  padding-bottom: 12px;
  text-align: left;
  border: 1px solid black; 
   border-collapse: collapse;
  background-color: #074f6d;
  color: white;
}
.header2 {
  padding-top: 12px;
  padding-bottom: 12px;
  text-align: left;
  border: 1px solid black; 
   border-collapse: collapse;
  background-color: #cc3a74;
  color: white;
}
.drop-menu{
	padding-left: 17px;
}
.drop-menu:hover {
 cursor:pointer;
 background-color: #ddd;
}
th{
white-space: nowrap;
min-width: 72px;
text-align: center;
}

.sortorder:after {
   content: '\25b2';
 } 
 .sortorder.descending:after {
    content: '\25bc';
 }

.action_box{
  margin-top: 5px;
  min-width: 137px;
  margin-left: 23px;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id/>
        <internal>false</internal>
        <link><![CDATA[function(scope, element, attrs, ctrl){
	
	var $ul, $contextMenu;

	scope.focusOnTableHeader = function() {
		element.find(".data-table-title").attr("tabindex", "-1").focus();
	}

	element.on('contextmenu', function(e){
		if (e.ctrlKey)
			return; // ctrlKey is for the debug menu, not this menu

		var rowScope = angular.element(e.target).scope();
		var field, item, fieldVal;

		// Context Menu for tbody item == c field == cal
		console.log(rowScope);
		if (angular.isDefined(rowScope.cal) && angular.isDefined(rowScope.c)){
			e.preventDefault();
			field = rowScope.cal;
			item = rowScope.c;
			fieldVal = item[field];
			console.log(field);
			console.log(item);
			console.log(fieldVal);
			var items = [
				['${Show Matching}', function(){
					ctrl.createQueryTerm(scope.data.table, field, item.sys_id, '=').then(function(term){
						ctrl.showMatching(field, term);
					});
				}],
				['${Filter Out}', function(){
					ctrl.createQueryTerm(scope.data.table, field, item.sys_id, '!=').then(function(term){
						ctrl.filterOut(field, term);
					});
				}]
			];

			renderContextMenu(items);
			setContextMenuPosition(e);
		}
	});

	function renderContextMenu(items){
		var scrollHeight = $('body').get(0).scrollHeight;
		$contextMenu = angular.element('<div>', {'class': 'dropdown clearfix context-dropdown open'});

		$contextMenu.on('click', function (e) {
			if ($(e.target).hasClass('dropdown')) {
				_clearContextMenus(event);
			}
		});
		$contextMenu.on('contextmenu', function (event) {
			event.preventDefault();
			_clearContextMenus(event);
		});

		$contextMenu.css({
			position: 'absolute',
			top: 0,
			height: scrollHeight,
			left: 0,
			right: 0,
			zIndex: 9999
		});

		$('body').append($contextMenu);

		$ul = angular.element('<ul>', {
			'class': 'dropdown-menu',
			'role': 'menu'
		});
		renderItems();
		$contextMenu.append($ul);

		function renderItems(){
			angular.forEach(items, function (item) {
				var $li = angular.element('<li>');

				if (item === null) {
					$li.addClass('divider');
				} else {
					var $a = angular.element('<a>');
					$a.attr({tabindex: '-1', href:'#'});
					$a.text(item[0]);
					$li.append($a);
					$li.on('click', function (e) {
						e.preventDefault();
						scope.$apply(function () {
							_clearContextMenus(e);
							item[1].call(item, item);
						});
					});
				}

				$ul.append($li);
			});
		}
	}

	function _clearContextMenus(event){
		if (!event){
			return;
		}

		angular.element(event.currentTarget).removeClass('context');

		var els = angular.element(".context-dropdown");
		angular.forEach(els, function(el){
			angular.element(el).remove();
		});
	}

	var contextMenuItemHeight = 0;
	function setContextMenuPosition(event){
		if (contextMenuItemHeight === 0)
			contextMenuItemHeight = $ul.children(0).height();

		// Why not just call .width() and .height() on the container? Because those calculations cause browsers to reflow
		// that can cause IE10 to take 200ms to render a context menu.
		var cmWidth = 150;
		var cmHeight = contextMenuItemHeight * $ul.children().length;
		var startX = event.pageX + cmWidth >= window.innerWidth ? event.pageX - cmWidth : event.pageX;
		var startY = event.pageY + cmHeight >= window.innerHeight ? event.pageY - cmHeight : event.pageY;

		$ul.css({
			display: 'block',
			position: 'absolute',
			left: startX,
			top: startY,
			'min-width': cmWidth
		});
	}
	
}]]></link>
        <name>Custom List</name>
        <option_schema>[{"hint":"incident","name":"table_name","section":"Data","label":"Table Name","type":"string"},{"hint":"active=true","name":"query","section":"Data","label":"Query","type":"string"},{"hint":"name,state","name":"fields","section":"Data","label":"Fields","type":"string"},{"name":"pagination","section":"Behavior","default_value":"false","label":"Pagination","type":"boolean"},{"name":"filter_breadcrumbs","section":"Behavior","default_value":"false","label":"Filter Breadcrumbs","type":"boolean"},{"name":"show_page_count","section":"Behavior","default_value":"false","label":"Show Page Count","type":"boolean"},{"hint":"Maximum string length of every cell","name":"max_value","section":"Data","default_value":"150","label":"Max Value String Count","type":"integer"},{"displayValue":"Page","name":"link_to_page","section":"Presentation","label":"Link to a page","type":"reference","value":"sp_page","ed":{"reference":"sp_page"}},{"hint":"Link should open on same page or not","name":"page_target","section":"Presentation","default_value":"_self","label":"Target","type":"choice","choices":[{"label":"_blank","value":"_blank"},{"label":"_self","value":"_self"},{"label":"_parent","value":"_parent"},{"label":"_top","value":"_top"}]},{"name":"pagination_position","section":"Behavior","label":"Pagination Position","type":"choice","choices":[{"label":"left","value":"left"},{"label":"right","value":"right"}]},{"hint":"Maximum record in a page","name":"max_record_page","section":"Data","default_value":"5","label":"Max record in a page","type":"integer"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */
	var table=options.table_name;
	data.table=table;
	data.view="sp";
	var query=options.query;
	var arrayData=[];
	var fields=options.fields;
	var listFields=fields.split(',');
	data.listFields=listFields;
	
	/*var tableHeader=options.table_header;
	data.tableHeader=tableHeader.split(',') */
	data.isPagination=options.pagination || false;
	data.isbreadcrumbs=options.filter_breadcrumbs||false;
	data.max_value=options.max_value || 150;
	data.page_target=options.page_target;
	data.page_portal= $sp.getValue('url_suffix');
	var sp_page = new GlideRecord('sp_page');
	if(sp_page.get(options.link_to_page))
		data.link_to_page=sp_page.getValue('id');
	else
		data.link_to_page='';
	
	
	data.filter = data.filter ||(input && input.filter)
	if(data.filter || (input && input.filter)){
		query=query+'^'+data.filter;
	}
	
	var tableHeader=[];
	data.fields_array = CheckPreference(data.table, data.view)|| fields.split(',');
	
	var gr = new GlideRecord(table);
	gr.addEncodedQuery(query);
	gr.query();
	while(gr.next()){
		var obj={};
		for(var i=0;i<data.fields_array.length;i++){
			try{
			var value=gr.getDisplayValue(data.fields_array[i]);
			value=value.slice(0, data.max_value);
			obj[data.fields_array[i]]=value;
			}catch(ex){}
		}
		obj.sys_id= gr.getValue('sys_id');
		obj.check=false;
		arrayData.push(obj)
	}
	data.rec=arrayData;
	data.queryString = gr.getEncodedQuery();
	
	for(var k =0; k< data.fields_array.length; k++){
		var field = data.fields_array[k];
		var ge = gr.getElement(field);
		tableHeader.push(ge.getLabel().toString());
	}
	data.tableHeader=tableHeader;
	var personalizeObj = {};
	personalizeObj.table = data.table;
	personalizeObj.view = data.view;
	data.personalizeParms = personalizeObj;
	
	function CheckPreference(table, view){
	var userPref = new GlideRecord('sys_user_preference');
		userPref.addQuery('name', table+'_'+view+'_list.view');
		userPref.addQuery('user', gs.getUserID());
		userPref.addEncodedQuery('valueISNOTEMPTY');
		userPref.orderByDesc('sys_created_on');
		userPref.query();
		if (userPref.next()) {
			return userPref.value.split(',') ;
		}else{
			return '';
		}
}
		/* Pagination Start */
	data.dataOptins={
		total_record_row:arrayData.length,
		maxrecord:parseInt(options.max_record_page),
		position:options.pagination_position,
		show_row_count:options.show_page_count,
		currentIndex:0
	};
	data.pagination=$sp.getWidget('pagination', data.dataOptins);
	/* Pagination End here*/
	var breadcrumbWidgetParams = {
		table: table,
		query: data.filter,
		enable_filter: true
	};
	data.filterBreadcrumbs = $sp.getWidget('widget-filter-breadcrumbs', breadcrumbWidgetParams);
	
	
	// List Action 
	var listAction=[];
	var grAction = new GlideRecord('x_26525_portal_list_action');
	grAction.addQuery('table',table)
	grAction.addEncodedQuery('active=true');
	grAction.orderBy('order');
	grAction.query();
	while(grAction.next()){
		var obj1={};
		obj1.action_name=grAction.getValue('action_name');
		obj1.order=grAction.getValue('order');
		obj1.script=grAction.getValue('script');
		listAction.push(obj1);
	}
	data.listAction=listAction;
	// List Action
	
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>rohit.kumar</sys_created_by>
        <sys_created_on>2021-11-29 03:27:10</sys_created_on>
        <sys_id>76c6762e0700011095c1f4be7c1ed06d</sys_id>
        <sys_mod_count>256</sys_mod_count>
        <sys_name>Custom List</sys_name>
        <sys_package display_value="Portal Util" source="x_26525_portal">52e536ea0700011095c1f4be7c1ed096</sys_package>
        <sys_policy/>
        <sys_scope display_value="Portal Util">52e536ea0700011095c1f4be7c1ed096</sys_scope>
        <sys_update_name>sp_widget_76c6762e0700011095c1f4be7c1ed06d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-01-13 06:16:11</sys_updated_on>
        <template><![CDATA[<div>
<!-- your widget template -->
  <!--{{c.data.dataOptins}} -->
  <div class="filter-breadcrumbs" ng-if="data.isbreadcrumbs == 'true'">
	    		<sp-widget widget="data.filterBreadcrumbs"></sp-widget>
   </div>

  <table id="customers">
    <thead>
    <tr>
    <th style=" width:3%;"><span class="glyphicon glyphicon-cog" ng-click="c.personalize('user_personalize_list')" aria-hidden="true"></span></th>
    <th ng-repeat="x in data.tableHeader track by $index " ng-class="headerClass($index)" ng-click="sort(data.listFields[$index])">{{x}}
      <span class="sortorder descending" ng-show="(sortKey==data.listFields[$index] && reverse==false)"></span>
      <span class="sortorder" ng-show="(sortKey==data.listFields[$index] && reverse==true)"></span>
      </th>
    </tr>
    </thead>
    
    <tbody>
    <tr ng-repeat="c in data.rec | orderBy: sortKey:reverse | limitTo:c.data.dataOptins.maxrecord: c.data.dataOptins.currentIndex " ng-if="data.isPagination == 'true'">
      <td><input type="checkbox" ng-model="c.check" ng-click="selectRec(c.check)"></td>
      <td ng-repeat="cal in data.fields_array track by $index ">
         <p ng-if="$index =='0' && data.link_to_page" ><a href="/{{data.page_portal}}?id={{data.link_to_page}}&sys_id={{c['sys_id']}}&table={{data.table}}" target="{{data.page_target}}">{{c[cal]}}</a></p>
         <p ng-if="$index =='0' && !data.link_to_page" >{{c[cal]}}</p>
         <p ng-if="$index !='0'" >{{c[cal]}}</p>
      </td>
    </tr>
    </tbody>
    
    <tr ng-repeat="c in data.rec" ng-if="data.isPagination != 'true'">
      <td ng-repeat="cal in data.listFields track by $index ">
        <p>{{c[cal]}}</p>
      </td>
    </tr>
    
  </table>
  <!-- List Action -->
  <div>
  	<!-- <widget id="list_action" options='{"datarec":data.rec,"datatable":data.table}'></widget> -->
  <input type="checkbox" name="selectAll" style="margin-left: 10px;" ng-click="selectAll()" ng-checked="selectAllRec">
  <select class="action_box" ng-model="selected" ng-change="selectAction()">
  <option value="">Select Action</option>
  <option ng-repeat="x in data.listAction" value="{{x.action_name}}">{{x.action_name}}</option>
	</select>
	</div>
  <div ng-if="data.isPagination == 'true'">
    <sp-widget widget="data.pagination"></sp-widget>
  </div>
  <br><br>
</div>]]></template>
    </sp_widget>
</record_update>
